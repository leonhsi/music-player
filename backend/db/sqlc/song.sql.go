// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: song.sql

package sqlc

import (
	"context"
)

const createSong = `-- name: CreateSong :one
INSERT INTO songs (
  song_name, artist_id, thumbnail_s3_path, mp3_s3_path
) VALUES (
  $1, $2, $3, $4
)
RETURNING song_id, song_name, artist_id, thumbnail_s3_path, mp3_s3_path
`

type CreateSongParams struct {
	SongName        string `json:"song_name"`
	ArtistID        int64  `json:"artist_id"`
	ThumbnailS3Path string `json:"thumbnail_s3_path"`
	Mp3S3Path       string `json:"mp3_s3_path"`
}

func (q *Queries) CreateSong(ctx context.Context, arg CreateSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, createSong,
		arg.SongName,
		arg.ArtistID,
		arg.ThumbnailS3Path,
		arg.Mp3S3Path,
	)
	var i Song
	err := row.Scan(
		&i.SongID,
		&i.SongName,
		&i.ArtistID,
		&i.ThumbnailS3Path,
		&i.Mp3S3Path,
	)
	return i, err
}

const deleteSong = `-- name: DeleteSong :exec
DELETE FROM songs
WHERE song_id = $1
`

func (q *Queries) DeleteSong(ctx context.Context, songID int64) error {
	_, err := q.db.Exec(ctx, deleteSong, songID)
	return err
}

const getSong = `-- name: GetSong :one
SELECT song_id, song_name, artist_id, thumbnail_s3_path, mp3_s3_path FROM songs
WHERE song_id = $1 LIMIT 1
`

func (q *Queries) GetSong(ctx context.Context, songID int64) (Song, error) {
	row := q.db.QueryRow(ctx, getSong, songID)
	var i Song
	err := row.Scan(
		&i.SongID,
		&i.SongName,
		&i.ArtistID,
		&i.ThumbnailS3Path,
		&i.Mp3S3Path,
	)
	return i, err
}

const listSongs = `-- name: ListSongs :many
SELECT song_id, song_name, artist_id, thumbnail_s3_path, mp3_s3_path FROM songs
ORDER BY song_id LIMIT $1
`

func (q *Queries) ListSongs(ctx context.Context, limit int32) ([]Song, error) {
	rows, err := q.db.Query(ctx, listSongs, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Song{}
	for rows.Next() {
		var i Song
		if err := rows.Scan(
			&i.SongID,
			&i.SongName,
			&i.ArtistID,
			&i.ThumbnailS3Path,
			&i.Mp3S3Path,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSong = `-- name: UpdateSong :one
UPDATE songs
  set song_name = $2,
  artist_id = $3,
  thumbnail_s3_path = $4,
  mp3_s3_path = $5
WHERE song_id = $1
RETURNING song_id, song_name, artist_id, thumbnail_s3_path, mp3_s3_path
`

type UpdateSongParams struct {
	SongID          int64  `json:"song_id"`
	SongName        string `json:"song_name"`
	ArtistID        int64  `json:"artist_id"`
	ThumbnailS3Path string `json:"thumbnail_s3_path"`
	Mp3S3Path       string `json:"mp3_s3_path"`
}

func (q *Queries) UpdateSong(ctx context.Context, arg UpdateSongParams) (Song, error) {
	row := q.db.QueryRow(ctx, updateSong,
		arg.SongID,
		arg.SongName,
		arg.ArtistID,
		arg.ThumbnailS3Path,
		arg.Mp3S3Path,
	)
	var i Song
	err := row.Scan(
		&i.SongID,
		&i.SongName,
		&i.ArtistID,
		&i.ThumbnailS3Path,
		&i.Mp3S3Path,
	)
	return i, err
}
